#FROM registry.cloud.zf-world.com/zf/zf-rhel8-ubi-python-38
#FROM centos/python-38-centos7:latest
#FROM registry.redhat.io/rhscl/python-38-rhel7:latest

FROM registry.cloud.zf-world.com/aitechcenter/centos7-python38:latest

LABEL maintainer "Z0003864<vivek.thota@zf.com>"

# Set ZF proxies
ENV http_proxy=http://frd-proxy.emea.zf-world.com:8080 \
    https_proxy=http://frd-proxy.emea.zf-world.com:8080 \
    no_proxy=.zf-world.com \
    HTTP_PROXY=http://frd-proxy.emea.zf-world.com:8080 \
    HTTPS_PROXY=http://frd-proxy.emea.zf-world.com:8080 \
    NO_PROXY=.zf-world.com

USER root

#### Packages ####
RUN yum clean all && yum repolist && yum install -y epel-release

RUN yum install -y rh-nodejs10

#### Default PATH ####

ENV CUDA_HOME /usr/local/cuda
ENV PATH $PATH:$CUDA_HOME

### CUDA Profile ####
#  For CUDA profiling, TensorFlow requires CUPTI.

ENV LD_LIBRARY_PATH /usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH

#### Nvidia Docker ####

LABEL com.nvidia.volumes.needed="nvidia_driver"

#### NVIDIA CUDA BASE + RUNTIME ####

ENV CUDA_VERSION 11.2.0

LABEL com.nvidia.cuda.version="${CUDA_VERSION}"
    
RUN NVIDIA_GPGKEY_SUM=d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5 && \
    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/7fa2af80.pub | sed '/^Version/d' > /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA && \
    echo "$NVIDIA_GPGKEY_SUM  /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA" | sha256sum -c --strict -
    
COPY cuda.repo /etc/yum.repos.d/cuda.repo
COPY nvidia-ml.repo /etc/yum.repos.d/nvidia-ml.repo 

RUN yum upgrade -y && yum install -y \
    cuda-cudart-11-2-11.2.72-1 \
    cuda-compat-11-2 \
    && ln -s cuda-11.2 /usr/local/cuda \
    && yum clean all \
    && rm -rf /var/cache/yum/*

RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/cuda/lib64" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/cuda/extras/CUPTI/lib64" >> /etc/ld.so.conf.d/nvidia.conf
    
ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64
    
#COPY NGC-DL-CONTAINER-LICENSE /

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility
ENV NVIDIA_REQUIRE_CUDA "cuda>=11.2 brand=tesla,driver>=418,driver<419 brand=tesla,driver>=440,driver<441 driver>=450"

ENV NCCL_VERSION 2.8.4

RUN yum install -y \
    cuda-libraries-11-2-11.2.0-1 \
    cuda-nvtx-11-2-11.2.67-1 \
    libnpp-11-2-11.2.1.68-1 \
    libcublas-11-2-11.3.1.68-1 \
    libnccl-2.8.4-1+cuda11.2 \
    && yum clean all \
    && rm -rf /var/cache/yum/*

COPY . /tmp/src

#### NVIDIA CUDNN 8.1.1 ####
#ENV CUDNN_VERSION 8.1.1.33
#LABEL com.nvidia.cudnn.version="${CUDNN_VERSION}"

#RUN yum install -y \
#    libcudnn8-${CUDNN_VERSION}-1.cuda11.2 \
#    && yum clean all \
#    && rm -rf /var/cache/yum/*

RUN rm -rf /tmp/src/.git* && \
    chown -R 1001 /tmp/src && \
    chgrp -R 0 /tmp/src && \
    chmod -R g+w /tmp/src && \
    rm -rf /tmp/scripts && \
    mv /tmp/src/.s2i/bin /tmp/scripts

USER 1001

LABEL io.k8s.description="CUDA based Jupyter notebooks." \
      io.k8s.display-name="Jupyter Notebook" \
      io.openshift.expose-services="8080:http" \
      io.openshift.tags="builder,jupyter" \
      io.openshift.s2i.scripts-url="image:///opt/app-root/builder"

RUN /tmp/scripts/assemble

# Set ZF proxies
ENV http_proxy= \
    https_proxy= \
    no_proxy= \
    HTTP_PROXY= \
    HTTPS_PROXY= \
    NO_PROXY=

CMD [ "/opt/app-root/builder/run" ]
